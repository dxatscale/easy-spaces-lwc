# Unique name for this workflow
name: sfpowerscripts build and deploy

# Definition when the workflow should run
on:
    workflow_dispatch:
    push:
        branches:
            - develop

# Jobs to be executed
jobs:
    quickbuild:
        name: QuickBuild the packages
        runs-on: ubuntu-latest
        steps:

            # Install CLI and PLugins
            - name: Install SFDX and Plugins
              run: |
                     wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                     mkdir sfdx-cli
                     tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                     ./sfdx-cli/install
                     echo 'y' | sfdx plugins:install sfpowerkit
                     echo 'y' | sfdx plugins:install @dxatscale/sfpowerscripts@alpha

            # Checkout the code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

             # Authenticate to DevHub
            - name: 'Authenticate to DevHub'
              shell: bash
              run: |
                     echo ${{ secrets.DEVHUB_SERVER_KEY }} > ./JWT_KEYFILE
                     sfdx force:auth:jwt:grant -u ${{ secrets.DEVHUB_USERNAME }} -i ${{ secrets.DEVHUB_CLIENT_ID }} -f ./JWT_KEYFILE -a devhub -r https://login.salesforce.com
                     rm -f ./JWT_KEYFILE

            # Create all packages
            - name: 'Create packages'
              id: sfpowerscripts-build
              run: 'sfdx sfpowerscripts:orchestrator:quickbuild -v devhub'

            # Publish artifacts
            - uses: actions/upload-artifact@v2
              with:
                 name: quickbuild-artifacts
                 path: artifacts

    # Simulating a deploy to System Test Environment using a scratch org
    deploy:
        name: Deploy and Validate the packages
        runs-on: ubuntu-latest
        needs: quickbuild
        steps:
             # Checkout the code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

              # Download Artifacts
            - name: Download Artifacts
              uses: actions/download-artifact@v2
              with:
                  name: quickbuild-artifacts
                  path: artifacts


              # Install sfdx and plugins
            - name: Install SFDX and Plugins
              run: |
                     wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                     mkdir sfdx-cli
                     tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                     ./sfdx-cli/install
                     echo 'y' | sfdx plugins:install sfpowerkit
                     echo 'y' | sfdx plugins:install @dxatscale/sfpowerscripts@alpha

             # Authenticate to DevHub
            - name: 'Authenticate to DevHub'
              shell: bash
              run: |
                     echo ${{ secrets.DEVHUB_SERVER_KEY }} > ./JWT_KEYFILE
                     sfdx force:auth:jwt:grant -u ${{ secrets.DEVHUB_USERNAME }} -i ${{ secrets.DEVHUB_CLIENT_ID }} -f ./JWT_KEYFILE -a devhub -r https://login.salesforce.com
                     rm -f ./JWT_KEYFILE

            # Create scratch org
            - name: Create scratch org
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

            # Install all new packages into scratch org
            - name: 'Install new package versions into scratch org'
              run: 'sfdx sfpowerscripts:orchestrator:deploy -u scratch-org'

            # Housekeeping
            - name: Delete scratch org
              if: always()
              run: sfdx force:org:delete -p -u scratch-org

    build:
         name: Build Production Ready packages
         runs-on: ubuntu-latest
         needs: deploy
         steps:
            # Install sfdx and plugins
           - name: Install SFDX and Plugins
             run: |
                   wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                   mkdir sfdx-cli
                   tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                   ./sfdx-cli/install
                   echo 'y' | sfdx plugins:install sfpowerkit
                   echo 'y' | sfdx plugins:install @dxatscale/sfpowerscripts@alpha

             # Checkout the code
           - name: 'Checkout source code'
             uses: actions/checkout@v2


            # Authenticate to DevHub
           - name: 'Authenticate to DevHub'
             shell: bash
             run: |
                     echo ${{ secrets.DEVHUB_SERVER_KEY }} > ./JWT_KEYFILE
                     sfdx force:auth:jwt:grant -u ${{ secrets.DEVHUB_USERNAME }} -i ${{ secrets.DEVHUB_CLIENT_ID }} -f ./JWT_KEYFILE -a devhub -r https://login.salesforce.com
                     rm -f ./JWT_KEYFILE

             # Create all packages
           - name: 'Create packages'
             id: sfpowerscripts-build
             run: 'sfdx sfpowerscripts:orchestrator:build -v devhub'

             # Publish artifacts
           - uses: actions/upload-artifact@v2
             with:
                 name: validated-artifacts
                 path: artifacts

    promote:
         runs-on: ubuntu-latest
         if: always()
         needs: build
         name: Promote the packages
         steps:

           # Install sfdx and plugins
             - name: Install SFDX and Plugins
               run: |
                   wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                   mkdir sfdx-cli
                   tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                   ./sfdx-cli/install
                   echo 'y' | sfdx plugins:install sfpowerkit
                   echo 'y' | sfdx plugins:install @dxatscale/sfpowerscripts@alpha


             # Checkout the code
             - name: 'Checkout source code'
               uses: actions/checkout@v2


              # Download Artifacts

             - name: Download Artifacts
               uses: actions/download-artifact@v2
               with:
                 name: validated-artifacts
                 path: artifacts


             # Authenticate to DevHub
             - name: 'Authenticate to DevHub'
               shell: bash
               run: |
                     echo ${{ secrets.DEVHUB_SERVER_KEY }} > ./JWT_KEYFILE
                     sfdx force:auth:jwt:grant -u ${{ secrets.DEVHUB_USERNAME }} -i ${{ secrets.DEVHUB_CLIENT_ID }} -f ./JWT_KEYFILE -a devhub -r https://login.salesforce.com
                     rm -f ./JWT_KEYFILE


             # Promoted all packages
             - name: 'Promote packages'
               id: sfpowerscripts-build
               run: 'sfdx sfpowerscripts:orchestrator:promote -v devhub'
